%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Function Name: LSLSTensor
%Aim: Solve the large sparse linear system generated by incorporating tensor into the MRF upsamling model
%Output: 
%   Result      -   the output depth data
%Input: 
%   Image       -   Input color image
%   SampleDepth -   Depth map need upsampling
%   SamplePoints-   The points have depth information
%   Height      -   Image height 
%   Width       -   Image width
%   sigma       -   Coefficient of gaussian kernel for color similarity
%   alpha       -   The balance factor between data term and smoothness term
%Code Author:
%   Liu Junyi, Zhejiang University
%   June 2012
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Result=LSLSTensor(T,SampleDepth,SamplePoints,Height,Width,sigma,alpha)   
    PixelNumber=Height*Width;
    %Measured Range Matrix - N*1
    Z=sparse(reshape(SampleDepth,PixelNumber,1));
    %Data Term Matrix - N*N
    x=find(reshape(SamplePoints,PixelNumber,1)==1);
    y=x;
    s=1;
    W=sparse(x,y,s,PixelNumber,PixelNumber);
    %Smoothness Term Matrix - 4N*N, Here we exclude the pixels on the boundary
%     S=sparse((Width-2)*(Height-2)*4,PixelNumber);
    
    %Compute the smoothness matrix
    tic;
    x=zeros(1,(Width-2)*(Height-2)*8);
    y=zeros(1,(Width-2)*(Height-2)*8);
    s=zeros(1,(Width-2)*(Height-2)*8);
    for i=2:Width-1      %Regardless of boundary
        for j=2:Height-1     %Regardless of boundary 
            w=sqrt(SmoothnessCost(T,j,i,sigma,2));
            Pos=(4*((Height-2)*(i-2)+j-2));
            x(2*Pos+1:2*Pos+4)=Pos+1:Pos+4;
            y(2*Pos+1:2*Pos+4)=(Height*(i-1)+j)*[1 1 1 1];
            s(2*Pos+1:2*Pos+4)=w';
            x(2*Pos+5:2*Pos+8)=Pos+1:Pos+4;
            y(2*Pos+5:2*Pos+8)=[Height*(i-2)+j Height*i+j Height*(i-1)+j-1 Height*(i-1)+j+1];
            s(2*Pos+5:2*Pos+8)=-w';   
        end
    end
    S=sparse(x,y,s,(Width-2)*(Height-2)*4,PixelNumber);
    SmoothnessTime=toc;
    fprintf('LSLSTensor:The running time of generating the pairwise matrix is %.5f s\n',SmoothnessTime)
    
    %Compute the A and b
    tic;
    A1=S'*S;
    A2=W'*W;
    A=alpha*A1+A2;
    b=W'*W*Z;
    MatrixGenerateTime=toc;
    fprintf('LSLSTensor:The running time of getting A and b is %.5f s\n',MatrixGenerateTime)
    
    %Using Backslash to solve the Ax=b
    tic;
    Result=A\b;
    BackslashTime=toc;
    fprintf('LSLSTensor:The running time of solving Ax=b by Backslash is %.5f s\n',BackslashTime)
end
